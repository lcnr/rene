import sys
from typing import (Any as _Any,
                    overload as _overload)

if sys.version_info < (3, 8):
    from typing_extensions import final as _final
else:
    from typing import final as _final

__version__: str

MIN_CONTOUR_VERTICES_COUNT: int = ...
MIN_MULTIPOLYGON_POLYGONS_COUNT: int = ...
MIN_MULTISEGMENT_SEGMENTS_COUNT: int = ...


@_final
class Location:
    BOUNDARY: 'Location' = ...
    EXTERIOR: 'Location' = ...
    INTERIOR: 'Location' = ...

    @_overload
    def __eq__(self, other: 'Location') -> bool:
        ...

    @_overload
    def __eq__(self, other: _Any) -> _Any:
        ...

    def __repr__(self) -> str:
        ...

    def __str__(self) -> str:
        ...


@_final
class Orientation:
    CLOCKWISE: 'Orientation' = ...
    COLLINEAR: 'Orientation' = ...
    COUNTERCLOCKWISE: 'Orientation' = ...

    @_overload
    def __eq__(self, other: 'Orientation') -> bool:
        ...

    @_overload
    def __eq__(self, other: _Any) -> _Any:
        ...

    def __repr__(self) -> str:
        ...

    def __str__(self) -> str:
        ...


@_final
class Relation:
    COMPONENT: 'Relation' = ...
    COMPOSITE: 'Relation' = ...
    COVER: 'Relation' = ...
    CROSS: 'Relation' = ...
    DISJOINT: 'Relation' = ...
    ENCLOSED: 'Relation' = ...
    ENCLOSES: 'Relation' = ...
    EQUAL: 'Relation' = ...
    OVERLAP: 'Relation' = ...
    TOUCH: 'Relation' = ...
    WITHIN: 'Relation' = ...

    @property
    def complement(self) -> 'Relation':
        ...

    @_overload
    def __eq__(self, other: 'Relation') -> bool:
        ...

    @_overload
    def __eq__(self, other: _Any) -> _Any:
        ...

    def __repr__(self) -> str:
        ...

    def __str__(self) -> str:
        ...
